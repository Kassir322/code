---
description: 
globs: 
alwaysApply: false
---
---
description: Правила разработки
globs: ["**/*"]
alwaysApply: true
---
# Правила разработки Mat-Focus

РАБОТУ С КУКАМИ ПРОВОДИТЬ ЧЕРЕЗ cookiesService в файле cookies.js
НЕ удаляй комментарии, а только дополняй их, в случае чего.

### Хранение токенов

- ✅ Токены авторизации должны храниться ТОЛЬКО в httpOnly cookies
- ❌ Запрещено использование localStorage для хранения токенов
- ❌ Запрещено использование sessionStorage для хранения токенов

### Причины:

1. Защита от XSS атак
2. Автоматическое удаление токена при закрытии браузера
3. Возможность установки флагов безопасности (httpOnly, secure, sameSite)
4. Централизованное управление временем жизни токена

## Работа с авторизацией

1. Все запросы к API должны автоматически включать токен из cookies
2. Проверка авторизации должна происходить на уровне middleware
3. При логауте необходимо удалять куки на клиенте и инвалидировать сессию на сервере


# Правила создания контроллеров в Strapi

## Эталонная модель
Модель `address` (`/src/api/address/`) является эталонной реализацией контроллера в проекте.
При разработке новых моделей или исправлении ошибок в существующих, необходимо:
1. Сверяться с реализацией модели адресов
2. Следовать той же структуре и подходам
3. Использовать аналогичные паттерны обработки ошибок
4. Копировать подход к проверке владельца сущности

Ссылка на эталонную модель: `strapi-api/src/api/address/`

## Основные принципы 
- Использовать `entityService` вместо модификации `ctx.query`
- Всегда проверять принадлежность сущности текущему пользователю
- Четко определять поля в populate для безопасности данных

## Структура контроллера

### Обязательные методы
1. `find` - получение списка
   - Использовать `findMany` с фильтром по текущему пользователю
   - Явно указывать поля в populate
   - Обрабатывать ошибки через try-catch

2. `findOne` - получение одной записи
   - Проверять принадлежность записи пользователю
   - Поддерживать как числовые, так и строковые ID
   - Возвращать 404 если запись не найдена

3. `create` - создание записи
   - Автоматически привязывать к текущему пользователю
   - Проверять бизнес-логику до создания
   - Валидировать входные данные

4. `update` - обновление записи
   - Проверять принадлежность записи пользователю
   - Проверять бизнес-логику до обновления
   - Возвращать 403 при попытке изменить чужую запись

5. `delete` - удаление записи
   - Проверять принадлежность записи пользователю
   - Возвращать 403 при попытке удалить чужую запись

### Безопасность
- В populate всегда явно указывать нужные поля
- Не возвращать чувствительные данные (пароли, токены)
- Использовать следующий формат для полей пользователя:
```javascript
fields: ['id', 'username', 'email', 'provider', 'confirmed', 'blocked']
```

### Обработка ошибок
- Использовать try-catch блоки
- Логировать ошибки через console.error
- Возвращать понятные сообщения об ошибках
- Использовать правильные HTTP коды:
  - 400 - Bad Request
  - 403 - Forbidden
  - 404 - Not Found

### Тестирование
Проверить следующие сценарии:
1. CRUD операции с валидными данными
2. Попытки доступа к чужим записям
3. Работу с невалидными ID
4. Специфичную бизнес-логику (например, is_default)
5. Корректность populate данных
