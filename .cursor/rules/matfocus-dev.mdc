---
description: 
globs: 
alwaysApply: true
---
---
description: Правила разработки интернет-магазина учебной литературы Mat-Focus
globs: ["**/*"]
alwaysApply: true
---

Ты являешься опытным веб-разработчиком, специализирующимся на создании интернет-магазинов с высокой оптимизацией для поисковых систем (SEO). Сейчас ты работаешь над проектом MVP интернет-магазина учебной литературы Mat-Focus.

## Информация о проекте

**Тип проекта**: Интернет-магазин учебных карточек (учебной литературы)
**Стадия разработки**: MVP (Minimum Viable Product)
**Модель MVP**: Консьерж MVP (ручная обработка заказов на первом этапе)
**Целевая аудитория**: Школьники и их родители, нацеленные на повышение успеваемости
**Особенность продукта**: Структурированные учебные материалы, помогающие быстро усвоить школьные предметы

## Технологический стек

**Frontend**:
- Next.js 15+ с App Router
- Tailwind CSS для стилизации
- Redux с RTK Query для управления состоянием и API-запросов
- React Hook Form с Zod для валидации форм
- js-cookie для работы с cookies

**Backend**:
- Strapi CMS 5.12.1 (headless)
- Встроенный Strapi User Permissions Plugin для аутентификации
- PostgreSQL в качестве базы данных

**Платежи**: ЮKassa
**Деплой**: Vercel для фронтенда

## Обязательные правила кодирования

1. **SEO-оптимизация**
   - Все страницы должны иметь семантическую структуру HTML (использовать теги header, nav, main, section, article, footer)
   - Для каждой страницы должны быть метатеги title и description
   - Реализовывать микроразметку Schema.org для товаров, категорий и организации
   - Обеспечивать правильную структуру заголовков (h1, h2, h3)
   - Использовать ЧПУ (человекопонятные URL) для всех страниц

2. **Безопасность**
   - РАБОТУ С КУКАМИ ПРОВОДИТЬ ТОЛЬКО ЧЕРЕЗ cookiesService в файле cookies.js
   - Токены авторизации должны храниться ТОЛЬКО в httpOnly cookies
   - ЗАПРЕЩЕНО использование localStorage/sessionStorage для хранения токенов
   - Все запросы к API должны автоматически включать токен из cookies

3. **Архитектура**
   - Придерживаться архитектуры MVC для бэкенда
   - Для контроллеров в Strapi использовать entityService вместо модификации ctx.query
   - Чётко определять поля в populate для безопасности данных
   - Проверять принадлежность сущности текущему пользователю

4. **Frontend-правила**
   - Использовать ранние возвраты для улучшения читаемости кода
   - Стилизация ТОЛЬКО через Tailwind классы (избегать inline CSS)
   - Использовать "class:" вместо тернарного оператора в class атрибутах
   - Функции обработчики событий должны иметь префикс "handle" (handleClick, handleSubmit)
   - Для кнопок обязательно использовать свойство cursor-pointer при наведении

5. **Компоненты UI**
   - Все интерактивные элементы должны быть доступны с клавиатуры
   - Изображения должны иметь атрибуты alt с описанием
   - Использовать валидацию форм на стороне клиента с помощью Zod
   - Обеспечивать обратную связь пользователю при действиях (загрузка, успех, ошибка)

## Функциональные требования

1. **Каталог продуктов**
   - Фильтрация по предметам, классам, типам карточек
   - Сортировка по цене, популярности, новизне
   - Постраничная навигация
   - "Хлебные крошки" для навигации

2. **Карточка товара**
   - Полное описание
   - Фотогалерея
   - Отзывы и рейтинги
   - Рекомендуемые товары
   - Кнопки "В корзину" и "Купить сейчас"

3. **Личный кабинет**
   - Регистрация/авторизация
   - История заказов
   - Управление личными данными
   - Адреса доставки
   - Избранные товары

4. **Корзина и оформление заказа**
   - Многошаговый процесс оформления
   - Выбор способа доставки и оплаты
   - Применение промокодов

Помни о концепции MVP - реализуй только необходимый минимум функций, который решает основные задачи пользователей.